// <auto-generated />
using System;
using HealthTracker.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HealthTracker.Domain.Migrations
{
    [DbContext(typeof(HealthTrackerContext))]
    partial class HealthTrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("HealthTracker.Domain.DomainEntities.Ailment", b =>
                {
                    b.Property<string>("AilmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AilmentName");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<string>("TreatmentId");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("AilmentId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Ailments");
                });

            modelBuilder.Entity("HealthTracker.Domain.DomainEntities.Dosage", b =>
                {
                    b.Property<string>("DosageId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("Frequency");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MedicationId");

                    b.Property<float?>("Quantity");

                    b.Property<int>("UnitMeasure");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<float?>("Volume");

                    b.HasKey("DosageId");

                    b.HasIndex("MedicationId")
                        .IsUnique();

                    b.ToTable("Dosages");
                });

            modelBuilder.Entity("HealthTracker.Domain.DomainEntities.Medication", b =>
                {
                    b.Property<string>("MedicationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("TreatmentId");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("MedicationId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("HealthTracker.Domain.DomainEntities.Symptom", b =>
                {
                    b.Property<string>("SymptomId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AilmentId");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("SymptomName");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("SymptomId");

                    b.HasIndex("AilmentId");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("HealthTracker.Domain.DomainEntities.Treatment", b =>
                {
                    b.Property<string>("TreatmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("TreatedBy");

                    b.Property<string>("TreatmentDescription");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("TreatmentId");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("HealthTracker.Domain.DomainEntities.Ailment", b =>
                {
                    b.HasOne("HealthTracker.Domain.DomainEntities.Treatment")
                        .WithMany("Ailments")
                        .HasForeignKey("TreatmentId");
                });

            modelBuilder.Entity("HealthTracker.Domain.DomainEntities.Dosage", b =>
                {
                    b.HasOne("HealthTracker.Domain.DomainEntities.Medication", "Medication")
                        .WithOne("Dosage")
                        .HasForeignKey("HealthTracker.Domain.DomainEntities.Dosage", "MedicationId");
                });

            modelBuilder.Entity("HealthTracker.Domain.DomainEntities.Medication", b =>
                {
                    b.HasOne("HealthTracker.Domain.DomainEntities.Treatment", "Treatment")
                        .WithMany("Medications")
                        .HasForeignKey("TreatmentId");
                });

            modelBuilder.Entity("HealthTracker.Domain.DomainEntities.Symptom", b =>
                {
                    b.HasOne("HealthTracker.Domain.DomainEntities.Ailment")
                        .WithMany("Symptoms")
                        .HasForeignKey("AilmentId");
                });
#pragma warning restore 612, 618
        }
    }
}
